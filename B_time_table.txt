Sure, I can help you create a study plan for the next three months. Since you have 2 hours for learning and 2 hours for practice each day, we'll break down the topics accordingly. Given the extensive list, we'll prioritize and ensure comprehensive coverage over the 90 days. Here's a suggested schedule:

### Week 1-2: Fundamentals
- **Day 1-2: Data Types**
  - Learning: int, float, boolean, string, char, long, double, bigint
  - Practice: Exercises on each data type

- **Day 3-4: Condition Operators**
  - Learning: if-else, switch statement, ternary operator
  - Practice: Conditional problems

- **Day 5-7: Loops**
  - Learning: for, while, do-while
  - Practice: Loop-based problems

### Week 3-4: Basic Data Structures and Algorithms
- **Day 8-10: Arrays**
  - Learning: static array, dynamic sized array, operations (add, remove, update)
  - Practice: Array manipulation exercises

- **Day 11-13: Linked Lists**
  - Learning: single linked list, double linked list, circular linked list
  - Practice: Linked list operations and problems

- **Day 14-15: Stacks**
  - Learning: Implementing stacks, reverse string using stack
  - Practice: Stack-based problems

- **Day 16-17: Queues**
  - Learning: Implementing queues, priority queue
  - Practice: Queue-based problems

- **Day 18-20: Hashmaps**
  - Learning: hash function, hash table, probing techniques
  - Practice: Hashmap-based problems

### Week 5-6: Advanced Data Structures
- **Day 21-23: Trees**
  - Learning: Pre-order, post-order, in-order traversal
  - Practice: Tree traversal problems

- **Day 24-26: AVL Trees**
  - Learning: zigzag, boundary, vertical order traversal
  - Practice: AVL tree problems

- **Day 27-29: Tries**
  - Learning: Implementing tries, autocomplete, longest common prefix
  - Practice: Trie-based problems

- **Day 30-32: Heaps**
  - Learning: min-heap, max-heap, heapify
  - Practice: Heap-based problems

### Week 7-8: Graphs and Algorithms
- **Day 33-35: Graph Basics**
  - Learning: Breadth-first search (BFS), depth-first search (DFS)
  - Practice: Graph traversal problems

- **Day 36-38: Advanced Graphs**
  - Learning: Weighted graphs, Dijkstra's algorithm, spanning trees
  - Practice: Graph algorithm problems

- **Day 39-41: Graph Algorithms**
  - Learning: Prim's algorithm, topological sorting, Kahn's algorithm
  - Practice: Graph sorting problems

### Week 9-10: Algorithmic Techniques
- **Day 42-44: Recursion**
  - Learning: Recursive techniques, memory stack
  - Practice: Recursive problems

- **Day 45-47: String Manipulation**
  - Learning: Reverse, rotate, remove, insert string
  - Practice: String manipulation problems

- **Day 48-50: Searching Algorithms**
  - Learning: linear, binary, jump, exponential search
  - Practice: Searching problems

### Week 11-12: Sorting Algorithms
- **Day 51-54: Basic Sorting**
  - Learning: Bubble, insertion, selection sort
  - Practice: Basic sorting problems

- **Day 55-58: Advanced Sorting**
  - Learning: Quick, merge, counting, bucket sort
  - Practice: Advanced sorting problems

### Week 13-14: Design Principles and Patterns
- **Day 59-61: Design Principles**
  - Learning: DRY, KISS, SOLID principles
  - Practice: Applying principles in code

- **Day 62-66: OOP Concepts**
  - Learning: Classes, objects, static/non-static, getter/setter, abstraction, polymorphism, inheritance, encapsulation
  - Practice: OOP problems and projects

- **Day 67-70: Design Patterns**
  - Learning: Singleton, builder, bridge, command, factory, adapter, proxy, observer, iterator
  - Practice: Implementing design patterns

### Week 15: Complexity and Binary Operations
- **Day 71-72: Time and Space Complexity**
  - Learning: Constant, linear, logarithmic, quadratic, cubic complexities
  - Practice: Analyzing and optimizing code

- **Day 73-75: Number Systems and Binary Operations**
  - Learning: Binary, decimal, octal, hexadecimal, left shift, right shift, count bits
  - Practice: Number system conversions and binary operations

### Week 16: Review and Advanced Topics
- **Day 76-80: Review and Reinforcement**
  - Review key topics and practice areas where you feel less confident
  - Mixed problems and projects to consolidate learning

- **Day 81-90: Advanced Projects**
  - Choose a comprehensive project that integrates multiple concepts
  - Work on the project to reinforce your understanding and application of various topics

### Daily Schedule
- **2 hours of learning**: Go through tutorials, videos, and reading materials.
- **2 hours of practice**: Solve problems, work on small projects, and apply what you've learned.

This plan ensures a balanced approach to learning and practicing a broad range of fundamental and advanced topics over three months.